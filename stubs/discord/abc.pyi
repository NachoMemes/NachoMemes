import abc
from typing import Any, Optional

class User(metaclass=abc.ABCMeta): ...

class GuildChannel:
    @property
    def changed_roles(self): ...
    @property
    def mention(self): ...
    @property
    def created_at(self): ...
    def overwrites_for(self, obj: Any): ...
    @property
    def overwrites(self): ...
    @property
    def category(self): ...
    @property
    def permissions_synced(self): ...
    def permissions_for(self, member: Any): ...
    async def delete(self, *, reason: Optional[Any] = ...) -> None: ...
    async def set_permissions(self, target: Any, *, overwrite: Any = ..., reason: Optional[Any] = ..., **permissions: Any) -> None: ...
    async def clone(self, *, name: Optional[Any] = ..., reason: Optional[Any] = ...) -> None: ...
    async def create_invite(self, *, reason: Optional[Any] = ..., **fields: Any): ...
    async def invites(self): ...

class Messageable(metaclass=abc.ABCMeta):
    async def send(self, content: Optional[Any] = ..., *, tts: bool = ..., embed: Optional[Any] = ..., file: Optional[Any] = ..., files: Optional[Any] = ..., delete_after: Optional[Any] = ..., nonce: Optional[Any] = ..., allowed_mentions: Optional[Any] = ..., reference: Optional[Any] = ..., mention_author: Optional[Any] = ...): ...
    async def trigger_typing(self) -> None: ...
    def typing(self): ...
    async def fetch_message(self, id: Any): ...
    async def pins(self): ...
    def history(self, *, limit: int = ..., before: Optional[Any] = ..., after: Optional[Any] = ..., around: Optional[Any] = ..., oldest_first: Optional[Any] = ...): ...