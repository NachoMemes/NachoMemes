import asyncio
from typing import Any, Optional

log: Any

class _ClientEventTask(asyncio.Task):
    def __init__(self, original_coro: Any, event_name: Any, coro: Any, loop: Any) -> None: ...

class Client:
    ws: Any = ...
    loop: Any = ...
    shard_id: Any = ...
    shard_count: Any = ...
    http: Any = ...
    def __init__(self, *, loop: Optional[Any] = ..., **options: Any): ...
    @property
    def latency(self): ...
    def is_ws_ratelimited(self): ...
    @property
    def user(self): ...
    @property
    def guilds(self): ...
    @property
    def emojis(self): ...
    @property
    def cached_messages(self): ...
    @property
    def private_channels(self): ...
    @property
    def voice_clients(self): ...
    def is_ready(self): ...
    def dispatch(self, event: Any, *args: Any, **kwargs: Any) -> None: ...
    async def on_error(self, event_method: Any, *args: Any, **kwargs: Any) -> None: ...
    async def request_offline_members(self, *guilds: Any) -> None: ...
    async def before_identify_hook(self, shard_id: Any, *, initial: bool = ...) -> None: ...
    async def login(self, token: Any, *, bot: bool = ...) -> None: ...
    async def logout(self) -> None: ...
    async def connect(self, *, reconnect: bool = ...) -> None: ...
    async def close(self) -> None: ...
    def clear(self) -> None: ...
    async def start(self, *args: Any, **kwargs: Any) -> None: ...
    def run(self, *args: Any, **kwargs: Any): ...
    def is_closed(self): ...
    @property
    def activity(self): ...
    @activity.setter
    def activity(self, value: Any) -> None: ...
    @property
    def allowed_mentions(self): ...
    @allowed_mentions.setter
    def allowed_mentions(self, value: Any) -> None: ...
    @property
    def intents(self): ...
    @property
    def users(self): ...
    def get_channel(self, id: Any): ...
    def get_guild(self, id: Any): ...
    def get_user(self, id: Any): ...
    def get_emoji(self, id: Any): ...
    def get_all_channels(self) -> None: ...
    def get_all_members(self) -> None: ...
    async def wait_until_ready(self) -> None: ...
    def wait_for(self, event: Any, *, check: Optional[Any] = ..., timeout: Optional[Any] = ...): ...
    def event(self, coro: Any): ...
    async def change_presence(self, *, activity: Optional[Any] = ..., status: Optional[Any] = ..., afk: bool = ...) -> None: ...
    def fetch_guilds(self, *, limit: int = ..., before: Optional[Any] = ..., after: Optional[Any] = ...): ...
    async def fetch_template(self, code: Any): ...
    async def fetch_guild(self, guild_id: Any): ...
    async def create_guild(self, name: Any, region: Optional[Any] = ..., icon: Optional[Any] = ..., *, code: Optional[Any] = ...): ...
    async def fetch_invite(self, url: Any, *, with_counts: bool = ...): ...
    async def delete_invite(self, invite: Any) -> None: ...
    async def fetch_widget(self, guild_id: Any): ...
    async def application_info(self): ...
    async def fetch_user(self, user_id: Any): ...
    async def fetch_user_profile(self, user_id: Any): ...
    async def fetch_channel(self, channel_id: Any): ...
    async def fetch_webhook(self, webhook_id: Any): ...
