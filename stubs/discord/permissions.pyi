from .flags import BaseFlags, alias_flag_value
from typing import Any

class permission_alias(alias_flag_value): ...

class Permissions(BaseFlags):
    value: Any = ...
    def __init__(self, permissions: int = ..., **kwargs: Any) -> None: ...
    def is_subset(self, other: Any): ...
    def is_superset(self, other: Any): ...
    def is_strict_subset(self, other: Any): ...
    def is_strict_superset(self, other: Any): ...
    __le__: Any = ...
    __ge__: Any = ...
    __lt__: Any = ...
    __gt__: Any = ...
    @classmethod
    def none(cls): ...
    @classmethod
    def all(cls): ...
    @classmethod
    def all_channel(cls): ...
    @classmethod
    def general(cls): ...
    @classmethod
    def text(cls): ...
    @classmethod
    def voice(cls): ...
    def update(self, **kwargs: Any) -> None: ...
    def handle_overwrite(self, allow: Any, deny: Any) -> None: ...
    def create_instant_invite(self): ...
    def kick_members(self): ...
    def ban_members(self): ...
    def administrator(self): ...
    def manage_channels(self): ...
    def manage_guild(self): ...
    def add_reactions(self): ...
    def view_audit_log(self): ...
    def priority_speaker(self): ...
    def stream(self): ...
    def read_messages(self): ...
    def view_channel(self): ...
    def send_messages(self): ...
    def send_tts_messages(self): ...
    def manage_messages(self): ...
    def embed_links(self): ...
    def attach_files(self): ...
    def read_message_history(self): ...
    def mention_everyone(self): ...
    def external_emojis(self): ...
    def use_external_emojis(self): ...
    def view_guild_insights(self): ...
    def connect(self): ...
    def speak(self): ...
    def mute_members(self): ...
    def deafen_members(self): ...
    def move_members(self): ...
    def use_voice_activation(self): ...
    def change_nickname(self): ...
    def manage_nicknames(self): ...
    def manage_roles(self): ...
    def manage_permissions(self): ...
    def manage_webhooks(self): ...
    def manage_emojis(self): ...

class PermissionOverwrite:
    def __init__(self, **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def pair(self): ...
    @classmethod
    def from_pair(cls, allow: Any, deny: Any): ...
    def is_empty(self): ...
    def update(self, **kwargs: Any) -> None: ...
    def __iter__(self) -> Any: ...
