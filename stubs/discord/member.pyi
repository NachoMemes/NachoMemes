import discord.abc
from discord import Role, Permissions
from .user import BaseUser
from typing import Any, Optional, Iterable


class VoiceState:
    session_id: Any = ...
    def __init__(self, data: Any, *, channel: Optional[Any] = ...) -> None: ...

def flatten_user(cls): ...

class Member(discord.abc.Messageable, BaseUser):
    discriminator: int
    nick: str

    @property
    def guild_permissions(self) -> Permissions: ...

    @property
    def roles(self) -> Iterable[Role]: ...

    guild: Any = ...
    joined_at: Any = ...
    premium_since: Any = ...
    activities: Any = ...
    pending: Any = ...
    def __init__(self, data: Any, guild: Any, state: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...
    @property
    def status(self): ...
    @status.setter
    def status(self, value: Any) -> None: ...
    @property
    def raw_status(self): ...
    @property
    def mobile_status(self): ...
    @property
    def desktop_status(self): ...
    @property
    def web_status(self): ...
    def is_on_mobile(self): ...
    @property
    def colour(self): ...
    @property
    def color(self): ...
    @property
    def mention(self): ...
    @property
    def display_name(self): ...
    @property
    def activity(self): ...
    def mentioned_in(self, message: Any): ...
    def permissions_in(self, channel: Any): ...
    @property
    def top_role(self): ...
    @property
    def voice(self): ...
    async def ban(self, **kwargs: Any) -> None: ...
    async def unban(self, *, reason: Optional[Any] = ...) -> None: ...
    async def kick(self, *, reason: Optional[Any] = ...) -> None: ...
    async def edit(self, *, reason: Optional[Any] = ..., **fields: Any) -> None: ...
    async def move_to(self, channel: Any, *, reason: Optional[Any] = ...) -> None: ...
    async def add_roles(self, *roles: Any, reason: Optional[Any] = ..., atomic: bool = ...) -> None: ...
    async def remove_roles(self, *roles: Any, reason: Optional[Any] = ..., atomic: bool = ...) -> None: ...
