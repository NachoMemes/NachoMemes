name: CI
on: [push]

env:
  python-version: "3.9"
  poetry-version: "1.1.5"

jobs:
  yamllint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install Dependencies
        run: |
          pip install poetry==${{ env.poetry-version }}
          poetry install
      - name: Run YAML Lint
        run: poetry run yamllint .

  pylint:
    name: Pylint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install Dependencies
        run: |
          pip install poetry==${{ env.poetry-version }}
          poetry install
      - name: Run Pylint
        run: poetry run pylint -E nachomemes

  mypy:
    name: Mypy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install Dependencies
        run: |
          pip install poetry==${{ env.poetry-version }}
          poetry install
      - name: Run Mypy
        run: poetry run mypy -p nachomemes

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install Dependencies
        run: |
          pip install poetry==${{ env.poetry-version }}
          poetry install
      - name: Test
        run: |
          poetry run python -m unittest

  hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run Hadolint
        uses: brpaz/hadolint-action@master

  image:
    name: Image
    runs-on: ubuntu-latest
    needs: [pylint, mypy, test, hadolint]
    env:
      cache-path: /tmp/.buildx-cache
      container-registry: ghcr.io
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Image Metadata
        id: image-metadata
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.container-registry }}/${{ github.repository }}
          tag-sha: true
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}
      - name: Cache Image Layers
        uses: actions/cache@v2
        env:
          base-key: ${{ runner.os }}-build-docker-buildx
        with:
          path: ${{ env.cache-path }}
          key: ${{ env.base-key }}-${{ github.sha }}
          restore-keys: |
            ${{ env.base-key }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.container-registry }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and Push to GitHub Container Registry
        id: docker-build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image-metadata.outputs.tags }}
          labels: ${{ steps.image-metadata.outpus.labels }}
          cache-from: type=local,src=${{ env.cache-path }}
          cache-to: type=local,dest=${{ env.cache-path }},mode=max
      - name: Deploy
        uses: jswny/sad@v3.0.2
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/feature/cd' }}
        env:
          SAD_REGISTRY: ${{ env.container-registry }}
          SAD_IMAGE: ${{ github.repository }}
          SAD_SERVER: ${{ secrets.SERVER }}
          SAD_USERNAME: ${{ secrets.USERNAME }}
          SAD_PRIVATE_KEY: ${{ secrets.SAD_PRIVATE_KEY }}
          SAD_DIGEST: ${{ steps.docker-build.outputs.digest }}
          SAD_DEPLOY_DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN_BETA }}
          SAD_DEPLOY_ACCESS_TOKEN: ${{ secrets.ACCESS_KEY }}
          SAD_DEPLOY_SECRET: ${{ secrets.ACCESS_KEY }}
          SAD_DEPLOY_REGION: ${{ secrets.REGION }}
