name: CI
on: [push]

env:
  python-version: "3.9"
  poetry-version: "1.1.6"
  container-registry: ghcr.io

jobs:
  yamllint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install Dependencies
        run: |
          pip install poetry==${{ env.poetry-version }}
          poetry install
      - name: Run YAML Lint
        run: poetry run yamllint .

  pylint:
    name: Pylint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install Dependencies
        run: |
          pip install poetry==${{ env.poetry-version }}
          poetry install
      - name: Run Pylint
        run: poetry run pylint -E nachomemes

  mypy:
    name: Mypy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install Dependencies
        run: |
          pip install poetry==${{ env.poetry-version }}
          poetry install
      - name: Run Mypy
        run: poetry run mypy -p nachomemes

  vulture:
    name: Vulture
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install Dependencies
        run: |
          pip install poetry==${{ env.poetry-version }}
          poetry install
      - name: Run Vulture
        run: poetry run vulture --min-confidence 90 nachomemes

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Install Dependencies
        run: |
          pip install poetry==${{ env.poetry-version }}
          poetry install
      - name: Test
        run: |
          poetry run python -m unittest

  hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v1.5.0

  image:
    name: Image
    runs-on: ubuntu-latest
    needs: [pylint, mypy, test, hadolint]
    env:
      cache-path: /tmp/.buildx-cache
    outputs:
      digest: ${{ steps.docker-build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Image Metadata
        id: image-metadata
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.container-registry }}/${{ github.repository }}
          tags: |
            type=sha
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Cache Image Layers
        uses: actions/cache@v2
        env:
          base-key: ${{ runner.os }}-build-docker-buildx
        with:
          path: ${{ env.cache-path }}
          key: ${{ env.base-key }}-${{ github.sha }}
          restore-keys: |
            ${{ env.base-key }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.container-registry }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and Push to GitHub Container Registry
        id: docker-build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image-metadata.outputs.tags }}
          labels: ${{ steps.image-metadata.outputs.labels }}
          cache-from: type=local,src=${{ env.cache-path }}
          cache-to: type=local,dest=${{ env.cache-path }},mode=max

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [image]
    if: ${{ github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', 'develop') }}
    env:
      SAD_CHANNEL: "production"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Format Image Name
        id: format-image-name
        uses: actions/github-script@v3
        with:
          result-encoding: string
          script: return "${{ github.repository }}".toLowerCase()
      - name: Deploy
        uses: docker://ghcr.io/jswny/sad:master
        env:
          SAD_REGISTRY: ${{ env.container-registry }}
          SAD_IMAGE: ${{ steps.format-image-name.outputs.result }}
          SAD_SERVER: ${{ secrets.SERVER }}
          SAD_USERNAME: ${{ secrets.USERNAME }}
          SAD_PRIVATE_KEY: ${{ secrets.SAD_PRIVATE_KEY }}
          SAD_ROOT_DIR: ${{ secrets.SAD_ROOT_DIR }}
          SAD_DIGEST: ${{ needs.image.outputs.digest }}
          SAD_CHANNEL: ${{ env.SAD_CHANNEL }}
          SAD_ENV_VARS: ${{ secrets.SAD_ENV_VARS }}
          SAD_DEPLOY_DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          SAD_DEPLOY_ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SAD_DEPLOY_SECRET: ${{ secrets.SECRET }}
          SAD_DEPLOY_REGION: ${{ secrets.REGION }}
      - name: Notify Discord Success
        if: ${{ success() }}
        env:
          status: "SUCCESS"
          color: 65315
        run: |
          curl -H "Content-Type: application/json" -X POST -d '{"embeds": [{"title": "Bot Deployment", "color": ${{ env.color }}, "fields": [{"name": "Result", "value": "**${{ env.status }}**"}, {"name": "Channel", "value": "`${{ env.SAD_CHANNEL }}`"}, {"name": "Actions Run", "value": "[`${{ github.run_id }}`](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"}, {"name": "Commit", "value": "[`${{ github.sha }}`](https://github.com/NachoMemes/NachoMemes/commit/${{ github.sha }})"}]}]}' "${{ secrets.DISCORD_WEBHOOK }}"
      - name: Notify Discord Failure
        if: ${{ !success() }}
        env:
          status: "FAILURE"
          color: 16723200
        run: |
          curl -H "Content-Type: application/json" -X POST -d '{"embeds": [{"title": "Bot Deployment", "color": ${{ env.color }}, "fields": [{"name": "Result", "value": "**${{ env.status }}**"}, {"name": "Channel", "value": "`${{ env.SAD_CHANNEL }}`"}, {"name": "Actions Run", "value": "[`${{ github.run_id }}`](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"}, {"name": "Commit", "value": "[`${{ github.sha }}`](https://github.com/NachoMemes/NachoMemes/commit/${{ github.sha }})"}]}]}' "${{ secrets.DISCORD_WEBHOOK }}"
